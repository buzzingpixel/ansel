/*============================================================================*\
	DO NOT EDIT THIS FILE. THIS IS A CORE FILE.
/*============================================================================*/

module.exports = function(grunt) {
	// Set up primary JS file
	var primaryJsFile = grunt.fabConfig.assets + '/js/script.min.js';
	var jsFiles = {};

	// Setup primary source
	jsFiles[primaryJsFile] = [];

	// Check for build before files in project file
	if (grunt.fabConfig.jsBuildBefore.length) {
		// Loop through the build before files
		grunt.fabConfig.jsBuildBefore.forEach(function(i) {
			// Push them into the primary JS file compile array
			jsFiles[primaryJsFile].push(i);
		});
	}

	// Make sure JS components have not been disabled
	if (grunt.fabConfig.enabledJsComponents.indexOf('base') > -1) {
		// Push core FAB file into primary JS file compile array
		jsFiles[primaryJsFile].push(
			grunt.fabConfig.source + '/coreFAB/js/fab.js'
		);

		// Loop through all the core files
		grunt.file.expand(
			grunt.fabConfig.source + '/coreFAB/js/base/**/*.js'
		).forEach(function(file) {
			// Split the file path into an array
			var fileArray = file.split('/');

			// Get the filename (last item in the array)
			var fileName = fileArray[fileArray.length - 1];

			// If the file is not a disabled component, add it to compile array
			if (grunt.fabConfig.disabledJsComponents.indexOf(fileName) < 0) {
				// Push file into primary JS file compile array
				jsFiles[primaryJsFile].push(file);
			}
		});

		// Push controller file into primary JS file compile array
		jsFiles[primaryJsFile].push(
			grunt.fabConfig.source + '/js/controller.js'
		);
	}

	// Add any files in primary JS build directory
	jsFiles[primaryJsFile].push(grunt.fabConfig.source + '/js/build/**/*.js');

	// Add any files in the JS directory
	jsFiles[primaryJsFile].push(grunt.fabConfig.source + '/js/**/*.js');
	jsFiles[primaryJsFile].push('!' + grunt.fabConfig.source + '/js/lib/**/*');

	// Add module config files
	jsFiles[primaryJsFile].push(
		grunt.fabConfig.source + '/modules/build/**/js/config.js'
	);

	// Add all other module files
	jsFiles[primaryJsFile].push(
		grunt.fabConfig.source + '/modules/build/**/js/*.js'
	);
	jsFiles[primaryJsFile].push(
		grunt.fabConfig.source + '/modules/build/**/js/build/**/*.js'
	);
	jsFiles[primaryJsFile].push(
		'!' + grunt.fabConfig.source + '/modules/build/**/js/lib/**/*'
	);

	// Check for build files in the project file
	if (grunt.fabConfig.jsBuild.length) {
		// Loop through the build files
		grunt.fabConfig.jsBuild.forEach(function(i) {
			// Push them into the primary JS file compile array
			jsFiles[primaryJsFile].push(i);
		});
	}

	// Make sure JS components have not been disabled
	if (grunt.fabConfig.enabledJsComponents.indexOf('base') > -1) {
		// Add the ready.js file to the primary file array
		jsFiles[primaryJsFile].push(
			grunt.fabConfig.source + '/coreFAB/js/ready.js'
		);
	}

	// Check for build after files
	if (grunt.fabConfig.jsBuildAfter.length) {
		// Loop through the build after files
		grunt.fabConfig.jsBuildAfter.forEach(function(i) {
			// Add the file to the primary JS file array
			jsFiles[primaryJsFile].push(i);
		});
	}

	// Check if there are individual javascript files to compile in project file
	if (Object.keys(grunt.fabConfig.jsFiles).length) {
		// Loop through the files
		for (var key in grunt.fabConfig.jsFiles) {
			// Create a uglify file array for it
			jsFiles[grunt.fabConfig.assets + '/js/' + key] = grunt.fabConfig.jsFiles[key];
		}
	}

	// Include version file
	jsFiles[primaryJsFile].push(
		grunt.fabConfig.source + '/coreFAB/compileCache/js/version.js'
	);

	// Add module compile files
	grunt.file.expand(grunt.fabConfig.source + '/modules/compile/*').forEach(function(i) {
		var moduleName = i.split('/').pop();
		var fileName = grunt.fabConfig.assets + '/modules/' + moduleName + '/js/script.min.js';

		// Configure module Less
		jsFiles[fileName] = [
			i + '/js/config.js',
			i + '/js/*.js',
			i + '/js/build/**/*.js',
			'!' + i + 'js/lib/**/*'
		];
	});

	// Set grunt config for javascript
	grunt.fabInitConfig.uglify = {
		build: {
			options: {
				sourceMap: grunt.fabConfig.sourceMaps,
				mangle: grunt.fabConfig.jsCompress,
				compress: grunt.fabConfig.jsCompress,
				beautify: ! grunt.fabConfig.jsCompress,
				sourceMapIncludeSources: true
			},
			files: jsFiles
		}
	};
};
